Life-cycle of a spring bean has 5 stages:
1. Does not exist phase
2. Instantiated phase
3. Initialized phase
4. Service phase
5. Destroyed phase


1. Does not exist phase -:
	Initially a spring bean object does not exist, if the bean object is in singleton scope then bean is instantiated by container
	at the time of loading the xml file.

2.Instantiation phase -:
	In instantiation phase, Spring container loads the spring bean class into the memory and creates the bean class object.
	All the dependencies will be resolved for a spring bean before its instantiation is finished.

3. Initialized phase -:
	If inside the spring bean class any user-defined init-method is configured, spring container will call that 
	method. 
Note:- unless initialization phase is over, spring container does not gives bean reference to the caller.

4. Service phase / Ready to use phase -:
	Here spring container provides the bean object reference to the caller, then caller can call its business method
	on that bean object.

5. Destruction phase -: 
	Upon the container shutdown (when we call close() method on the container class ) spring container will call
	user-defined destroy() method if it is configured, just before bean instance is garbage collected.

Note:-  when we shutdown the container, all the associated bean obj will be eligible for the garbage
	collection




---------------------------------------------Example of Initialization Phase -:


Line 6: ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
	
	init-method = "beforeConstructor"	

	static void beforeConstructor(){
	
	System.out.println("This function is called at the time of initiliazation");

	}
	
	As soon as Line 6 is run by, our object is initialized.

----------------------------------------------Example of Destroyed Phase -:


	ClassPathXmlApplicationContext  ct = (ClassPathXmlApplicationContext)ctx;
	ct.close();

	After our job is done, when we call ct.close() method, Spring container calls the user-defined destroy() method
	if it is configured, just before instance is garbage collected.
	
		









	







